set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Plugin 'klen/python-mode'
"Plugin 'Autopep8.vim'
Plugin 'bling/vim-airline'
Plugin 'BufferGator'
" Plugin 'Syntastic'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
"
Plugin 'scrooloose/nerdcommenter'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set nocompatible | filetype indent plugin on | syn on

let mapleader = ","

" pymode settings
let g:pymode = 1
" Pylint configuration file
let g:pymode_lint_config = '$HOME/.config/pylintrc'
nnoremap <leader>p :PymodeLint<cr>    "pressing ,p will run plyint on current buffer

" airline settings
let g:airline#extensions#tabline#enabled = 1

" syntastic settings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"

" global and possibly overridden by file type
set tabstop=8
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent
set noic
syntax on

set background=dark
set showmatch
set smartcase
set ai
set si
set lbr
set sw=4
set backspace=indent,eol,start
set undolevels=1000
set title


set foldenable
set foldnestmax=10
set foldlevelstart=0
set foldmethod=indent
"set foldmethod=syntax
autocmd BufWinEnter * normal zR
noremap <space> za
noremap - zm
noremap = zr
noremap _ zM
noremap + zR
:imap jj <Esc>

hi MatchParen cterm=bold ctermbg=none ctermfg=magenta
hi MatchParen cterm=underline ctermbg=none ctermfg=none
"#ctermbg=green ctermfg=blue

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
    %s/\s\+$//ge
      exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite * :call DeleteTrailingWS()
autocmd BufWrite *.yaml :call DeleteTrailingWS()
autocmd BufWrite *.json :call DeleteTrailingWS()
autocmd BufWrite *.c :call DeleteTrailingWS()
autocmd BufWrite *.h :call DeleteTrailingWS()
autocmd BufWrite *.cpp :call DeleteTrailingWS()
autocmd BufWrite *.hpp :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()


set cursorline
