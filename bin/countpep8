#!/usr/bin/python
import os
import sys
import threading
import subprocess
from collections import defaultdict
import multiprocessing
import argparse


config = None
counts = defaultdict(int)


def check_file(filepath):
    try:
        output = subprocess.check_output(['/usr/local/bin/pep8', '--statistics', '--max-line-length=132',
                                          '--config=', '-qq', filepath])
    except subprocess.CalledProcessError as e:
        return [l.split()[:2] for l in e.output.split('\n') if l.strip()]


def get_result(result):
    if result:
        for count, kind in result:
            counts[kind] += int(count)


def main(dir, sortbycount=False, quiet=False):
    dir = os.path.abspath(dir)
    if not quiet:
        print 'collecting files in %s...' % dir
    number_of_files = 0
    pool = multiprocessing.Pool()
    for root, subdirs, files in os.walk(dir):
        for s in ['pyenv', '.sdists-venv', 'static', 'waf', 'build-waf']:
            if s in subdirs:
                subdirs.remove(s)
        for s in subdirs:
            if s.startswith('.waf'):
                subdirs.remove(s)
        for f in files:
            if f.endswith('.py') and f != 'passogva.py':
                number_of_files += 1
                filepath = os.path.join(root, f)
                pool.apply_async(check_file, args=(filepath,), callback=get_result)
    if not quiet:
        print 'processing %r files...' % number_of_files
    pool.close()
    pool.join()

    if not quiet:
        print 'Pep8 Results'
    items = counts.items()
    if sortbycount:
        items.sort(key=lambda item: item[1])
    else:
        items.sort()

    for name, value in items:
        if config.itemidonly:
            print name
        else:
            print '%s %6d  %s' % (name, value, errorcodes[name])


errorcodes = {'E1': 'Indentation',
              'E101': 'indentation contains mixed spaces and tabs',
              'E111': 'indentation is not a multiple of four',
              'E112': 'expected an indented block',
              'E113': 'unexpected indentation',
              'E121': 'continuation line indentation is not a multiple of four',
              'E122': 'continuation line missing indentation or outdented',
              'E123': "closing bracket does not match indentation of opening bracket's line",
              'E124': 'closing bracket does not match visual indentation',
              'E125': 'continuation line does not distinguish itself from next logical line',
              'E126': 'continuation line over-indented for hanging indent',
              'E127': 'continuation line over-indented for visual indent',
              'E128': 'continuation line under-indented for visual indent',
              'E2': 'Whitespace',
              'E201': "whitespace after '('",
              'E202': "whitespace before ')'",
              'E203': "whitespace before ':'",
              'E211': "whitespace before '('",
              'E221': 'multiple spaces before operator',
              'E222': 'multiple spaces after operator',
              'E223': 'tab before operator',
              'E224': 'tab after operator',
              'E225': 'missing whitespace around operator',
              'E226': '(*) missing whitespace around arithmetic operator',
              'E227': 'missing whitespace around bitwise or shift operator',
              'E228': 'missing whitespace around modulo operator',
              'E231': "missing whitespace after ','",
              'E241': "multiple spaces after ','",
              'E242': "tab after ','",
              'E251': 'unexpected spaces around keyword / parameter equals',
              'E261': 'at least two spaces before inline comment',
              'E262': "inline comment should start with '# '",
              'E271': 'multiple spaces after keyword',
              'E272': 'multiple spaces before keyword',
              'E273': 'tab after keyword',
              'E274': 'tab before keyword',
              'E3': 'Blank line',
              'E301': 'expected 1 blank line, found 0',
              'E302': 'expected 2 blank lines, found 0',
              'E303': 'too many blank lines (3)',
              'E304': 'blank lines found after function decorator',
              'E4': 'Import',
              'E401': 'multiple imports on one line',
              'E5': 'Line length',
              'E501': 'line too long (82 > 79 characters)',
              'E502': 'the backslash is redundant between brackets',
              'E7': 'Statement',
              'E701': 'multiple statements on one line (colon)',
              'E702': 'multiple statements on one line (semicolon)',
              'E703': 'statement ends with a semicolon',
              'E711': "comparison to None should be 'if cond is None:'",
              'E712': "comparison to True should be 'if cond:'",
              'E721': "do not compare types, use 'isinstance()'",
              'E9': 'Runtime',
              'E901': 'SyntaxError or IndentationError',
              'E902': 'IOError',
              'W1': 'Indentation warning',
              'W191': 'indentation contains tabs',
              'W2': 'Whitespace warning',
              'W291': 'trailing whitespace',
              'W292': 'no newline at end of file',
              'W293': 'blank line contains whitespace',
              'W3': 'Blank line warning',
              'W391': 'blank line at end of file',
              'W6': 'Deprecation warning',
              'W601': "has_key() is deprecated, use 'in'",
              'W602': 'deprecated form of raising exception',
              'W603': "'<>' is deprecated, use '!='",
              'W604': "backticks are deprecated, use 'repr()'",
}



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--sort-by-count', action='store_true', dest='sortbycount',
                        help='sort results by count instead of by item id')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='suppress informational messages and only show counts')
    parser.add_argument('-i', '--item-id-only', action='store_true', dest='itemidonly',
                        help='just show item id for items with count > 0')
    parser.add_argument('directory', default='.', nargs='?',
                        help='root directory for finding files to be processed')
    global config
    config = parser.parse_args()
    main(config.directory, config.sortbycount, config.quiet)
